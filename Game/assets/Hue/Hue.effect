// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// CCEffect %{
//   techniques:
//   - passes:
//     - vert: vs
//       frag: fs
//       blendState:
//         targets:
//         - blend: true
//       rasterizerState:
//         cullMode: none
//       properties:
//         texture: { value: white }
//         alphaThreshold: { value: 0.5 }
//         inputColor: { value: [0.0, 0.0, 0.0, 0.0] , editor: { type: color }}
//         hue: { value: 0.5 }
//         u_dH: { value: 0.5 }
//         u_dS: { value: 0.5 }
//         u_dL: { value: 0.5 }
// }%


// CCProgram vs %{
//   precision highp float;

//   #include <cc-global>
//   #include <cc-local>

//   in vec3 a_position;
//   in vec4 a_color;
//   out vec4 v_color;

//   #if USE_TEXTURE
//   in vec2 a_uv0;
//   out vec2 v_uv0;
//   #endif

//   void main () {
//     vec4 pos = vec4(a_position, 1);

//     #if CC_USE_MODEL
//     pos = cc_matViewProj * cc_matWorld * pos;
//     #else
//     pos = cc_matViewProj * pos;
//     #endif

//     #if USE_TEXTURE
//     v_uv0 = a_uv0;
//     #endif

//     v_color = a_color;

//     gl_Position = pos;
//   }
// }%


// CCProgram fs %{
//   precision highp float;
  
//   #include <alpha-test>
//   #include <texture>

//   in vec4 v_color;
  
//   uniform Hue {
//     float hue;
//     float u_dH;
//     float u_dS;
//     float u_dL;
//   };
//   uniform InputColor {
//     vec4 inputColor;
//   };



//   #if USE_TEXTURE
//   in vec2 v_uv0;
//   uniform sampler2D texture;
//   #endif

//   void main () {
//     vec4 o = vec4(1, 1, 1, 1);

//     #if USE_TEXTURE
//       CCTexture(texture, v_uv0, o);
//     #endif

//     o *= v_color;
//     vec4 texColor = o;

//     float r = texColor.r;
//     float g = texColor.g;
//     float b = texColor.b;
//     float a = texColor.a;
//     //convert rgb to hsl
//     float h;
//     float s;
//     float l;
//     {
//         float max = max(max(r,g),b);  
//         float min = min(min(r,g),b);
//         l=0.5*(max+min);  
 
//         if(l==0.0||max==min){  
//             s=0.0;  
//         }else if(0.0<=l&&l<=0.5){  
//             s=(max-min)/(2.0*l);  
//         }else if(l>0.5){  
//             s=(max-min)/(2.0-2.0*l);  
//         }  
//     }
 
//      h=h+u_dH;  
//      s=min(1.0,max(0.0,s+u_dS));  
 
 
//     vec4 finalColor;  
//      {  
//         float q;  
//         if(l<0.5){  
//             q=l*(1.0+s);  
//         }else if(l>=0.5){  
//             q=l+s-l*s;  
//         }  
//         float p=2.0*l-q;  
//         float hk=h/360.0;  
//         float t[3];  
//         t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;  
//         for(int i=0;i<3;i++){  
//             if(t[i]<0.0)t[i]+=1.0;  
//             if(t[i]>1.0)t[i]-=1.0;  
//         }
//         float c[3];  
//         for(int i=0;i<3;i++){  
//             if(t[i]<1.0/6.0){  
//                 c[i]=p+((q-p)*6.0*t[i]);  
//             }
//             else if(t[i] >= 1.0/6.0&&t[i]<0.5){  
//                 c[i]=q;  
//             }
//             else if(t[i] >=0.5&&t[i]<2.0/3.0){  
//                  c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));  
//             }
//             else
//                {  
//                  c[i]=p;  
//              }  
//         }  
//          finalColor=vec4(c[0],c[1],c[2],a); 
//      }

//     finalColor+=vec4(u_dL,u_dL,u_dL,0.0);
//      ALPHA_TEST(o);

//     gl_FragColor = finalColor;
//   }
// }%



CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        inputColor: { value: [0.0, 0.0, 0.0, 0.0] , editor: { type: color }}
        hue: { value: 0.5 }
        u_dH: { value: 0.5 }
        u_dS: { value: 0.5 }
        u_dL: { value: 0.5 }
}%

CCProgram vs %{

precision highp float;

#include <cc-global>
#include <cc-local>

in vec3 a_position;
in vec4 a_color;
out vec4 v_color;
#if USE_TINT
  in vec4 a_color0;
#endif

#if USE_TEXTURE
in vec2 a_uv0;
out vec2 v_uv0;
#endif

out vec4 v_light;
#if USE_TINT
  out vec4 v_dark;
#endif

void main () {
  mat4 mvp;
  
  #if CC_USE_MODEL
    mvp = cc_matViewProj * cc_matWorld;
  #else
    mvp = cc_matViewProj;
  #endif

 #if USE_TEXTURE
    v_uv0 = a_uv0;
 #endif

  v_light = a_color;
  #if USE_TINT
    v_dark = a_color0;
  #endif
  v_color = a_color;
  gl_Position = mvp * vec4(a_position, 1);
}

}%

CCProgram fs %{

precision highp float;

in vec4 v_color;
  
uniform Hue {
  float hue;
  float u_dH;
  float u_dS;
  float u_dL;
};
uniform InputColor {
  vec4 inputColor;
};


#if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
#endif

in vec4 v_light;
#if USE_TINT
  in vec4 v_dark;
#endif

#include <alpha-test>
#include <texture>

void main () {
    vec4 o = vec4(1, 1, 1, 1);
 
 #if USE_TEXTURE
   CCTexture(texture, v_uv0, o);
 #endif

    o *= v_color;
    vec4 texColor = o;

    float r = texColor.r;
    float g = texColor.g;
    float b = texColor.b;
    float a = texColor.a;
    //convert rgb to hsl
    float h;
    float s;
    float l;
    {
        float max = max(max(r,g),b);  
        float min = min(min(r,g),b);
        l=0.5*(max+min);  
 
        if(l==0.0||max==min){  
            s=0.0;  
        }else if(0.0<=l&&l<=0.5){  
            s=(max-min)/(2.0*l);  
        }else if(l>0.5){  
            s=(max-min)/(2.0-2.0*l);  
        }  
    }
 
     h=h+u_dH;  
     s=min(1.0,max(0.0,s+u_dS));  
 
 
    vec4 texColor1;  
     {  
        float q;  
        if(l<0.5){  
            q=l*(1.0+s);  
        }else if(l>=0.5){  
            q=l+s-l*s;  
        }  
        float p=2.0*l-q;  
        float hk=h/360.0;  
        float t[3];  
        t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;  
        for(int i=0;i<3;i++){  
            if(t[i]<0.0)t[i]+=1.0;  
            if(t[i]>1.0)t[i]-=1.0;  
        }
        float c[3];  
        for(int i=0;i<3;i++){  
            if(t[i]<1.0/6.0){  
                c[i]=p+((q-p)*6.0*t[i]);  
            }
            else if(t[i] >= 1.0/6.0&&t[i]<0.5){  
                c[i]=q;  
            }
            else if(t[i] >=0.5&&t[i]<2.0/3.0){  
                 c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));  
            }
            else
               {  
                 c[i]=p;  
             }  
        }  
         texColor1=vec4(c[0],c[1],c[2],a); 
     }

    texColor1+=vec4(u_dL,u_dL,u_dL,0.0);
     //ALPHA_TEST(o);

  // vec4 texColor = vec4(1.0);
  //CCTexture(texture, v_uv0, texColor1);
  vec4 finalColor;

  #if USE_TINT
    finalColor.a = v_light.a * texColor1.a;
    finalColor.rgb = ((texColor1.a - 1.0) * v_dark.a + 1.0 - texColor1.rgb) * v_dark.rgb + texColor1.rgb * v_light.rgb;
  #else
    finalColor = texColor1 * v_light;
  #endif

  ALPHA_TEST(finalColor);

  gl_FragColor = finalColor;
}

}%




//ALPHA_TEST(0)