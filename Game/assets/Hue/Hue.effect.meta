{
  "ver": "1.0.25",
  "uuid": "87b1e257-41fa-46ee-8c3e-8e5dafa26058",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n#endif\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n #if USE_TEXTURE\n    v_uv0 = a_uv0;\n #endif\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  v_color = a_color;\n  vec2 u_rotation = vec2(0.17,0.99);\n   vec3 rotatedPosition = vec3(\n     a_position.x * u_rotation.y + a_position.y * u_rotation.x,\n     a_position.y * u_rotation.y - a_position.x * u_rotation.x,\n     a_position.z * 0.2\n     );\n  gl_Position = mvp * vec4(rotatedPosition, 1);\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\nuniform float u_dH;\nuniform float u_dS;\nuniform float u_dL;\n#if USE_TEXTURE\n    varying vec2 v_uv0;\n    uniform sampler2D texture;\n#endif\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvoid main () {\n    vec4 o = vec4(1, 1, 1, 1);\n #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n #endif\n    o *= v_color;\n    vec4 texColor = o;\n    float r = texColor.r;\n    float g = texColor.g;\n    float b = texColor.b;\n    float a = texColor.a;\n    float h;\n    float s;\n    float l;\n    {\n        float max = max(max(r,g),b);\n        float min = min(min(r,g),b);\n        l=0.5*(max+min);\n        if(l==0.0||max==min){\n            s=0.0;\n        }else if(0.0<=l&&l<=0.5){\n            s=(max-min)/(2.0*l);\n        }else if(l>0.5){\n            s=(max-min)/(2.0-2.0*l);\n        }\n    }\n     h=h+u_dH;\n     s=min(1.0,max(0.0,s+u_dS));\n    vec4 texColor1;\n     {\n        float q;\n        if(l<0.5){\n            q=l*(1.0+s);\n        }else if(l>=0.5){\n            q=l+s-l*s;\n        }\n        float p=2.0*l-q;\n        float hk=h/360.0;\n        float t[3];\n        t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;\n        for(int i=0;i<3;i++){\n            if(t[i]<0.0)t[i]+=1.0;\n            if(t[i]>1.0)t[i]-=1.0;\n        }\n        float c[3];\n        for(int i=0;i<3;i++){\n            if(t[i]<1.0/6.0){\n                c[i]=p+((q-p)*6.0*t[i]);\n            }\n            else if(t[i] >= 1.0/6.0&&t[i]<0.5){\n                c[i]=q;\n            }\n            else if(t[i] >=0.5&&t[i]<2.0/3.0){\n                 c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));\n            }\n            else\n               {\n                 c[i]=p;\n             }\n        }\n         texColor1=vec4(c[0],c[1],c[2],a);\n     }\n    texColor1+=vec4(u_dL,u_dL,u_dL,0.0);\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * texColor1.a;\n    finalColor.rgb = ((texColor1.a - 1.0) * v_dark.a + 1.0 - texColor1.rgb) * v_dark.rgb + texColor1.rgb * v_light.rgb;\n  #else\n    finalColor = texColor1 * v_light;\n  #endif\n  ALPHA_TEST(finalColor);\n  gl_FragColor = finalColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TINT\n  in vec4 a_color0;\n#endif\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nout vec4 v_light;\n#if USE_TINT\n  out vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n #if USE_TEXTURE\n    v_uv0 = a_uv0;\n #endif\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  v_color = a_color;\n  vec2 u_rotation = vec2(0.17,0.99);\n   vec3 rotatedPosition = vec3(\n     a_position.x * u_rotation.y + a_position.y * u_rotation.x,\n     a_position.y * u_rotation.y - a_position.x * u_rotation.x,\n     a_position.z * 0.2\n     );\n  gl_Position = mvp * vec4(rotatedPosition, 1);\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\nuniform Hue {\n  float hue;\n  float u_dH;\n  float u_dS;\n  float u_dL;\n};\nuniform InputColor {\n  vec4 inputColor;\n};\n#if USE_TEXTURE\n    in vec2 v_uv0;\n    uniform sampler2D texture;\n#endif\nin vec4 v_light;\n#if USE_TINT\n  in vec4 v_dark;\n#endif\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvoid main () {\n    vec4 o = vec4(1, 1, 1, 1);\n #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n #endif\n    o *= v_color;\n    vec4 texColor = o;\n    float r = texColor.r;\n    float g = texColor.g;\n    float b = texColor.b;\n    float a = texColor.a;\n    float h;\n    float s;\n    float l;\n    {\n        float max = max(max(r,g),b);\n        float min = min(min(r,g),b);\n        l=0.5*(max+min);\n        if(l==0.0||max==min){\n            s=0.0;\n        }else if(0.0<=l&&l<=0.5){\n            s=(max-min)/(2.0*l);\n        }else if(l>0.5){\n            s=(max-min)/(2.0-2.0*l);\n        }\n    }\n     h=h+u_dH;\n     s=min(1.0,max(0.0,s+u_dS));\n    vec4 texColor1;\n     {\n        float q;\n        if(l<0.5){\n            q=l*(1.0+s);\n        }else if(l>=0.5){\n            q=l+s-l*s;\n        }\n        float p=2.0*l-q;\n        float hk=h/360.0;\n        float t[3];\n        t[0]=hk+1.0/3.0;t[1]=hk;t[2]=hk-1.0/3.0;\n        for(int i=0;i<3;i++){\n            if(t[i]<0.0)t[i]+=1.0;\n            if(t[i]>1.0)t[i]-=1.0;\n        }\n        float c[3];\n        for(int i=0;i<3;i++){\n            if(t[i]<1.0/6.0){\n                c[i]=p+((q-p)*6.0*t[i]);\n            }\n            else if(t[i] >= 1.0/6.0&&t[i]<0.5){\n                c[i]=q;\n            }\n            else if(t[i] >=0.5&&t[i]<2.0/3.0){\n                 c[i]=p+((q-p)*6.0*(2.0/3.0-t[i]));\n            }\n            else\n               {\n                 c[i]=p;\n             }\n        }\n         texColor1=vec4(c[0],c[1],c[2],a);\n     }\n    texColor1+=vec4(u_dL,u_dL,u_dL,0.0);\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * texColor1.a;\n    finalColor.rgb = ((texColor1.a - 1.0) * v_dark.a + 1.0 - texColor1.rgb) * v_dark.rgb + texColor1.rgb * v_light.rgb;\n  #else\n    finalColor = texColor1 * v_light;\n  #endif\n  ALPHA_TEST(finalColor);\n  gl_FragColor = finalColor;\n}"
      }
    }
  ],
  "subMetas": {}
}