// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        resolution: { value: [0, 0]}
        time: { value: 0.5}
        ymax: { value: 0.5}
        ymin: { value: 0.0} 
        xmax: { value: 1.0}
        xmin: { value: 0.0} 
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform Time
  {
    float time;
    float ymax;
    float ymin;
    float xmax;
    float xmin;
  };

  uniform input {
    vec2 resolution;
  };

  vec2 s(vec2 p)
  {
    float d=time * 0.2;
    float x = 8.0 * (p.x + d);
    float y = 8.0 * (p.y + d);
      
    return vec2(cos(x-y) * cos(y), sin(x + y) * sin(y));
  }

  void main () {
  vec2 rs = resolution.xy;
  vec2 uv = v_uv0.xy;
  
  vec2 q = v_uv0.xy;
 

  //vec2 q = uv + 2.0 / resolution.x *(s(uv) - s(uv + rs));
  
  vec4 color = v_color;

  if(uv.y > ymin && uv.y < ymax && uv.x > xmin && uv.x < xmax){
      q = uv + 2.0 / resolution.x *(s(uv) - s(uv + rs));
      color *= texture2D(texture, q);
  }
  else{
      color *= texture2D(texture, v_uv0);
  }

  // color *= texture2D(texture, q); // texture2D纹理对象里面采样颜色;
  
  gl_FragColor = color;
}
}%
