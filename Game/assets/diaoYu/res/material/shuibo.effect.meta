{
  "ver": "1.0.25",
  "uuid": "9c89f9d3-4915-48bb-b4d5-9e4f67935ea1",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform float time;\nuniform float ymax;\nuniform float ymin;\nuniform float xmax;\nuniform float xmin;\n  uniform vec2 resolution;\n  vec2 s(vec2 p)\n  {\n    float d=time * 0.2;\n    float x = 8.0 * (p.x + d);\n    float y = 8.0 * (p.y + d);\n    return vec2(cos(x-y) * cos(y), sin(x + y) * sin(y));\n  }\n  void main () {\n  vec2 rs = resolution.xy;\n  vec2 uv = v_uv0.xy;\n  vec2 q = v_uv0.xy;\n  vec4 color = v_color;\n  if(uv.y > ymin && uv.y < ymax && uv.x > xmin && uv.x < xmax){\n      q = uv + 2.0 / resolution.x *(s(uv) - s(uv + rs));\n      color *= texture2D(texture, q);\n  }\n  else{\n      color *= texture2D(texture, v_uv0);\n  }\n  gl_FragColor = color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform Time\n  {\n    float time;\n    float ymax;\n    float ymin;\n    float xmax;\n    float xmin;\n  };\n  uniform input {\n    vec2 resolution;\n  };\n  vec2 s(vec2 p)\n  {\n    float d=time * 0.2;\n    float x = 8.0 * (p.x + d);\n    float y = 8.0 * (p.y + d);\n    return vec2(cos(x-y) * cos(y), sin(x + y) * sin(y));\n  }\n  void main () {\n  vec2 rs = resolution.xy;\n  vec2 uv = v_uv0.xy;\n  vec2 q = v_uv0.xy;\n  vec4 color = v_color;\n  if(uv.y > ymin && uv.y < ymax && uv.x > xmin && uv.x < xmax){\n      q = uv + 2.0 / resolution.x *(s(uv) - s(uv + rs));\n      color *= texture2D(texture, q);\n  }\n  else{\n      color *= texture2D(texture, v_uv0);\n  }\n  gl_FragColor = color;\n}"
      }
    }
  ],
  "subMetas": {}
}